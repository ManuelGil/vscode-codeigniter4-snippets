{
  "routes get": {
    "prefix": [
      "ci:routes:get",
      "$routes->get",
      "routes get"
    ],
    "body": "\\$routes->get('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Specifies a route that is only available to GET requests."
  },
  "routes post": {
    "prefix": [
      "ci:routes:post",
      "$routes->post",
      "routes post"
    ],
    "body": "\\$routes->post('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Specifies a route that is only available to POST requests."
  },
  "routes put": {
    "prefix": [
      "ci:routes:put",
      "$routes->put",
      "routes put"
    ],
    "body": "\\$routes->put('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Specifies a route that is only available to PUT requests."
  },
  "routes delete": {
    "prefix": [
      "ci:routes:delete",
      "$routes->delete",
      "routes delete"
    ],
    "body": "\\$routes->delete('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Specifies a route that is only available to DELETE requests."
  },
  "routes head": {
    "prefix": [
      "ci:routes:head",
      "$routes->head",
      "routes head"
    ],
    "body": "\\$routes->head('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Specifies a route that is only available to HEAD requests."
  },
  "routes patch": {
    "prefix": [
      "ci:routes:patch",
      "$routes->patch",
      "routes patch"
    ],
    "body": "\\$routes->patch('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Specifies a route that is only available to PATCH requests."
  },
  "routes options": {
    "prefix": [
      "ci:routes:options",
      "$routes->options",
      "routes options"
    ],
    "body": "\\$routes->options('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Specifies a route that is only available to OPTIONS requests."
  },
  "routes cli": {
    "prefix": [
      "ci:routes:cli",
      "$routes->cli",
      "routes cli"
    ],
    "body": "\\$routes->cli('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Specifies a route that is only available to command-line requests."
  },
  "routes add": {
    "prefix": [
      "ci:routes:add",
      "$routes->add",
      "routes add"
    ],
    "body": "\\$routes->add('${1:url}', '${2:control}::${3:function}', ['as' => '${4:alias}', 'filter' => '${5:filter}']);",
    "description": "Adds a single route to the collection."
  },
  "routes view": {
    "prefix": [
      "ci:routes:view",
      "$routes->view",
      "routes view"
    ],
    "body": "\\$routes->view('${1:url}', '${2:view}', ['as' => '${3:alias}', 'filter' => '${4:filter}']);",
    "description": "Specifies a route that will only display a view."
  },
  "routes addPlaceholder": {
    "prefix": [
      "ci:routes:addPlaceholder",
      "$routes->addPlaceholder",
      "routes addPlaceholder"
    ],
    "body": "\\$routes->addPlaceholder('${1:uuid}', '${2:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}}');",
    "description": "Registers a new constraint with the system."
  },
  "routes presenter": {
    "prefix": [
      "ci:routes:presenter",
      "$routes->presenter",
      "routes presenter"
    ],
    "body": "\\$routes->presenter('${1:ulr}');",
    "description": "Creates a collections of HTTP-verb based routes for a presenter controller."
  },
  "routes resource": {
    "prefix": [
      "ci:routes:resource",
      "$routes->resource",
      "routes resource"
    ],
    "body": "\\$routes->resource('${1:ulr}');",
    "description": "Creates a collections of HTTP-verb based routes for a controller."
  },
  "routes match": {
    "prefix": [
      "ci:routes:match",
      "$routes->match",
      "routes match"
    ],
    "body": "\\$routes->match([${1:verb}], '${2:url}', '${3:control}::${4:function}', ['as' => '${5:alias}', 'filter' => '${6:filter}']);",
    "description": "Specifies a single route to match for multiple HTTP Verbs."
  },
  "routes addRedirect": {
    "prefix": [
      "ci:routes:addRedirect",
      "$routes->addRedirect",
      "routes addRedirect"
    ],
    "body": "\\$routes->addRedirect('${1:url}', '${2:route}');",
    "description": "Adds a temporary redirect from one route to another."
  },
  "routes map": {
    "prefix": [
      "ci:routes:map",
      "$routes->map",
      "routes map"
    ],
    "body": "\\$routes->map(['${1:routes}'], ['as' => '${2:alias}', 'filter' => '${3:filter}']);",
    "description": "A shortcut method to add a number of routes at a single time."
  },
  "routes setPrioritize": {
    "prefix": [
      "ci:routes:setPrioritize",
      "$routes->setPrioritize",
      "routes setPrioritize"
    ],
    "body": "\\$routes->setPrioritize('${1:boolean}');",
    "description": "Enable or Disable sorting routes by priority."
  },
  "routes setTranslateURIDashes": {
    "prefix": [
      "ci:routes:setTranslateURIDashes",
      "$routes->setTranslateURIDashes",
      "routes setTranslateURIDashes"
    ],
    "body": "\\$routes->setTranslateURIDashes('${1:boolean}');",
    "description": "Tells the system whether to convert dashes in URI strings into underscores."
  },
  "routes setAutoRoute": {
    "prefix": [
      "ci:routes:setAutoRoute",
      "$routes->setAutoRoute",
      "routes setAutoRoute"
    ],
    "body": "\\$routes->setAutoRoute('${1:boolean}');",
    "description": "If TRUE, the system will attempt to match the URI against Controllers by matching each segment against folders/files in APPPATH/Controllers, when a match wasn't found against defined routes."
  },
  "routes setDefaultNamespace": {
    "prefix": [
      "ci:routes:setDefaultNamespace",
      "$routes->setDefaultNamespace",
      "routes setDefaultNamespace"
    ],
    "body": "\\$routes->setDefaultNamespace('${1:namespace}');",
    "description": "Sets the default namespace to use for Controllers when no other namespace has been specified."
  },
  "routes setDefaultController": {
    "prefix": [
      "ci:routes:setDefaultController",
      "$routes->setDefaultController",
      "routes setDefaultController"
    ],
    "body": "\\$routes->setDefaultController('${1:controller}');",
    "description": "Sets the default controller to use when no other controller has been specified."
  },
  "routes setDefaultMethod": {
    "prefix": [
      "ci:routes:setDefaultMethod",
      "$routes->setDefaultMethod",
      "routes setDefaultMethod"
    ],
    "body": "\\$routes->setDefaultMethod('${1:method}');",
    "description": "Sets the default method to call on the controller when no other method has been set in the route."
  },
  "routes environment": {
    "prefix": [
      "ci:routes:environment",
      "$routes->environment",
      "routes environment"
    ],
    "body": [
      "\\$routes->environment('${1:development}', static function (\\$routes)",
      "{",
      "\t\\$routes->add('${2:builder}', '${3:Tools\\\\Builder}::${4:function}');",
      "});"
    ],
    "description": "Limits the routes to a specified ENVIRONMENT or they won't run."
  },
  "routes group": {
    "prefix": [
      "ci:routes:group",
      "$routes->group",
      "routes group"
    ],
    "body": [
      "\\$routes->group('${1:url}', ['namespace' => '${2:namespace}', 'filter' => '${3:filter}'], static function (\\$routes) {",
      "\t//",
      "});"
    ],
    "description": "Group a series of routes under a single URL segment."
  },
  "routes loadRoutes": {
    "prefix": [
      "ci:routes:loadRoutes",
      "$routes->loadRoutes",
      "routes loadRoutes"
    ],
    "body": "\\$routes->loadRoutes('${1:routesFile}')",
    "description": "Loads main routes file and discover routes."
  },
  "routes getPlaceholders": {
    "prefix": [
      "ci:routes:getPlaceholders",
      "$routes->getPlaceholders",
      "routes getPlaceholders"
    ],
    "body": "\\$routes->getPlaceholders()",
    "description": "For `spark routes`"
  },
  "routes set404Override": {
    "prefix": [
      "ci:routes:set404Override",
      "$routes->set404Override",
      "routes set404Override"
    ],
    "body": "\\$routes->set404Override($callable)",
    "description": "ets the class/method that should be called if routing doesn't find a match. It can be either a closure or the controller/method name exactly like a route is defined: Users: :index."
  },
  "routes get404Override": {
    "prefix": [
      "ci:routes:get404Override",
      "$routes->get404Override",
      "routes get404Override"
    ],
    "body": "\\$routes->get404Override()",
    "description": "Returns the 404 Override setting, which can be null, a closure or the controller/string."
  },
  "routes setDefaultConstraint": {
    "prefix": [
      "ci:routes:setDefaultConstraint",
      "$routes->setDefaultConstraint",
      "routes setDefaultConstraint"
    ],
    "body": "\\$routes->setDefaultConstraint('${1:placeholder}')",
    "description": "Sets the default constraint to be used in the system. Typically for use with the 'resource' method."
  },
  "routes getDefaultController": {
    "prefix": [
      "ci:routes:getDefaultController",
      "$routes->getDefaultController",
      "routes getDefaultController"
    ],
    "body": "\\$routes->getDefaultController()",
    "description": "Returns the name of the default controller. With Namespace."
  },
  "routes getDefaultMethod": {
    "prefix": [
      "ci:routes:getDefaultMethod",
      "$routes->getDefaultMethod",
      "routes getDefaultMethod"
    ],
    "body": "\\$routes->getDefaultMethod()",
    "description": "Returns the name of the default method to use within the controller."
  },
  "routes getDefaultNamespace": {
    "prefix": [
      "ci:routes:getDefaultNamespace",
      "$routes->getDefaultNamespace",
      "routes getDefaultNamespace"
    ],
    "body": "\\$routes->getDefaultNamespace()",
    "description": "Returns the default namespace as set in the Routes config file."
  },
  "routes shouldTranslateURIDashes": {
    "prefix": [
      "ci:routes:shouldTranslateURIDashes",
      "$routes->shouldTranslateURIDashes",
      "routes shouldTranslateURIDashes"
    ],
    "body": "\\$routes->shouldTranslateURIDashes()",
    "description": "Returns the current value of the translateURIDashes setting."
  },
  "routes shouldAutoRoute": {
    "prefix": [
      "ci:routes:shouldAutoRoute",
      "$routes->shouldAutoRoute",
      "routes shouldAutoRoute"
    ],
    "body": "\\$routes->shouldAutoRoute()",
    "description": "Returns the flag that tells whether to autoRoute URI against Controllers."
  },
  "routes getRoutes": {
    "prefix": [
      "ci:routes:getRoutes",
      "$routes->getRoutes",
      "routes getRoutes"
    ],
    "body": "\\$routes->getRoutes('${1:verb}', ${2:boolean})",
    "description": "Returns the raw array of available routes."
  },
  "routes getRoutesOptions": {
    "prefix": [
      "ci:routes:getRoutesOptions",
      "$routes->getRoutesOptions",
      "routes getRoutesOptions"
    ],
    "body": "\\$routes->getRoutesOptions('${1:routeKey}', '${2:verb}')",
    "description": "Returns one or all routes options."
  },
  "routes getHTTPVerb": {
    "prefix": [
      "ci:routes:getHTTPVerb",
      "$routes->getHTTPVerb",
      "routes getHTTPVerb"
    ],
    "body": "\\$routes->getHTTPVerb()",
    "description": "Returns the current HTTP Verb being used."
  },
  "routes setHTTPVerb": {
    "prefix": [
      "ci:routes:setHTTPVerb",
      "$routes->setHTTPVerb",
      "routes setHTTPVerb"
    ],
    "body": "\\$routes->setHTTPVerb('${1:verb}')",
    "description": "Sets the current HTTP verb. Used primarily for testing."
  },
  "routes isRedirect": {
    "prefix": [
      "ci:routes:isRedirect",
      "$routes->isRedirect",
      "routes isRedirect"
    ],
    "body": "\\$routes->isRedirect('${1:routeKey}')",
    "description": "Determines if the route is a redirecting route."
  },
  "routes getRedirectCode": {
    "prefix": [
      "ci:routes:getRedirectCode",
      "$routes->getRedirectCode",
      "routes getRedirectCode"
    ],
    "body": "\\$routes->getRedirectCode('${1:routeKey}')",
    "description": "Grabs the HTTP status code from a redirecting Route."
  },
  "routes reverseRoute": {
    "prefix": [
      "ci:routes:reverseRoute",
      "$routes->reverseRoute",
      "routes reverseRoute"
    ],
    "body": "\\$routes->reverseRoute('${1:search}', '${2:params}')",
    "description": "Attempts to look up a route based on its destination."
  },
  "routes isFiltered": {
    "prefix": [
      "ci:routes:isFiltered",
      "$routes->isFiltered",
      "routes isFiltered"
    ],
    "body": "\\$routes->isFiltered('${1:search}', '${2:verb}')",
    "description": "Checks a route (using the \"from\") to see if it's filtered or not."
  },
  "routes getFilterForRoute": {
    "prefix": [
      "ci:routes:getFilterForRoute",
      "$routes->getFilterForRoute",
      "routes getFilterForRoute"
    ],
    "body": "\\$routes->getFilterForRoute('${1:search}', '${2:verb}')",
    "description": "Returns the filter that should be applied for a single route, along with any parameters it might have."
  },
  "routes getFiltersForRoute": {
    "prefix": [
      "ci:routes:getFiltersForRoute",
      "$routes->getFiltersForRoute",
      "routes getFiltersForRoute"
    ],
    "body": "\\$routes->getFiltersForRoute('${1:search}', '${2:verb}')",
    "description": "Returns the filters that should be applied for a single route, along with any parameters it might have."
  },
  "routes resetRoutes": {
    "prefix": [
      "ci:routes:resetRoutes",
      "$routes->resetRoutes",
      "routes resetRoutes"
    ],
    "body": "\\$routes->resetRoutes()",
    "description": "Reset the routes, so that a test case can provide the explicit ones needed for it."
  },
  "routes getRegisteredControllers": {
    "prefix": [
      "ci:routes:getRegisteredControllers",
      "$routes->getRegisteredControllers",
      "routes getRegisteredControllers"
    ],
    "body": "\\$routes->getRegisteredControllers('${1:verb}')",
    "description": "Get all controllers in Route Handlers."
  },
  "routes useSupportedLocalesOnly": {
    "prefix": [
      "ci:routes:useSupportedLocalesOnly",
      "$routes->useSupportedLocalesOnly",
      "routes useSupportedLocalesOnly"
    ],
    "body": "\\$routes->useSupportedLocalesOnly(${1:boolean})",
    "description": "Set The flag that limit or not the routes with {locale} placeholder to App::$supportedLocales."
  },
  "routes shouldUseSupportedLocalesOnly": {
    "prefix": [
      "ci:routes:shouldUseSupportedLocalesOnly",
      "$routes->shouldUseSupportedLocalesOnly",
      "routes shouldUseSupportedLocalesOnly"
    ],
    "body": "\\$routes->shouldUseSupportedLocalesOnly()",
    "description": "Get the flag that limit or not the routes with {locale} placeholder to App::$supportedLocales."
  }
}
