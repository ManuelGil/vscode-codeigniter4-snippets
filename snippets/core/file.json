{
  "file getSize": {
    "prefix": [
      "ci:file:getSize",
      "$file->getSize",
      "file getSize"
    ],
    "body": "\\$file->getSize();",
    "description": "Retrieve the file size."
  },
  "file getSizeByUnit": {
    "prefix": [
      "ci:file:getSizeByUnit",
      "$file->getSizeByUnit",
      "file getSizeByUnit"
    ],
    "body": "\\$file->getSizeByUnit('${1:unit}');",
    "description": "Retrieve the file size by unit."
  },
  "file guessExtension": {
    "prefix": [
      "ci:file:guessExtension",
      "$file->guessExtension",
      "file guessExtension"
    ],
    "body": "\\$file->guessExtension();",
    "description": "Attempts to determine the file extension based on the trusted getType() method. If the mime type is unknown, will return null."
  },
  "file getMimeType": {
    "prefix": [
      "ci:file:getMimeType",
      "$file->getMimeType",
      "file getMimeType"
    ],
    "body": "\\$file->getMimeType();",
    "description": "Retrieve the media type of the file. SHOULD not use information from the $_FILES array, but should use other methods to more accurately determine the type of file, like finfo, or mime_content_type()."
  },
  "file getRandomName": {
    "prefix": [
      "ci:file:getRandomName",
      "$file->getRandomName",
      "file getRandomName"
    ],
    "body": "\\$file->getRandomName();",
    "description": "Generates a random names based on a simple hash and the time, with the correct file extension attached."
  },
  "file move": {
    "prefix": [
      "ci:file:move",
      "$file->move",
      "file move"
    ],
    "body": "\\$file->move('${1:targetPath}', '${2:name}', ${3:boolean});",
    "description": "Moves a file to a new location."
  },
  "file getDestination": {
    "prefix": [
      "ci:file:getDestination",
      "$file->getDestination",
      "file getDestination"
    ],
    "body": "\\$file->getDestination('${1:destination}', '${2:delimiter}', ${3:int});",
    "description": "Returns the destination path for the move operation where overwriting is not expected."
  },
  "file hasMoved": {
    "prefix": [
      "ci:file:hasMoved",
      "$file->hasMoved",
      "file hasMoved"
    ],
    "body": "\\$file->hasMoved();",
    "description": "Returns whether the file has been moved or not. If it has, the move() method will not work and certain properties, like the tempName, will no longer be available."
  },
  "file getError": {
    "prefix": [
      "ci:file:getError",
      "$file->getError",
      "file getError"
    ],
    "body": "\\$file->getError();",
    "description": "Retrieve the error associated with the uploaded file."
  },
  "file getErrorString": {
    "prefix": [
      "ci:file:getErrorString",
      "$file->getErrorString",
      "file getErrorString"
    ],
    "body": "\\$file->getErrorString();",
    "description": "Get error string."
  },
  "file getClientMimeType": {
    "prefix": [
      "ci:file:getClientMimeType",
      "$file->getClientMimeType",
      "file getClientMimeType"
    ],
    "body": "\\$file->getClientMimeType();",
    "description": "Returns the mime type as provided by the client."
  },
  "file getName": {
    "prefix": [
      "ci:file:getName",
      "$file->getName",
      "file getName"
    ],
    "body": "\\$file->getName();",
    "description": "Retrieve the filename. This will typically be the filename sent by the client, and should not be trusted. If the file has been moved, this will return the final name of the moved file."
  },
  "file getClientName": {
    "prefix": [
      "ci:file:getClientName",
      "$file->getClientName",
      "file getClientName"
    ],
    "body": "\\$file->getClientName();",
    "description": "Returns the name of the file as provided by the client during upload."
  },
  "file getTempName": {
    "prefix": [
      "ci:file:getTempName",
      "$file->getTempName",
      "file getTempName"
    ],
    "body": "\\$file->getTempName();",
    "description": "Gets the temporary filename where the file was uploaded to."
  },
  "file getExtension": {
    "prefix": [
      "ci:file:getExtension",
      "$file->getExtension",
      "file getExtension"
    ],
    "body": "\\$file->getExtension();",
    "description": "Overrides SPLFileInfo's to work with uploaded files, since the temp file that's been uploaded doesn't have an extension."
  },
  "file getClientExtension": {
    "prefix": [
      "ci:file:getClientExtension",
      "$file->getClientExtension",
      "file getClientExtension"
    ],
    "body": "\\$file->getClientExtension();",
    "description": "Returns the original file extension, based on the file name that was uploaded. This is NOT a trusted source."
  },
  "file isValid": {
    "prefix": [
      "ci:file:isValid",
      "$file->isValid",
      "file isValid"
    ],
    "body": "\\$file->isValid();",
    "description": "Returns whether the file was uploaded successfully, based on whether it was uploaded via HTTP and has no errors."
  },
  "file store": {
    "prefix": [
      "ci:file:store",
      "$file->store",
      "file store"
    ],
    "body": "\\$file->store('${1:folderName}', '${2:fileName}');",
    "description": "Save the uploaded file to a new location."
  },
  "files get": {
    "prefix": [
      "ci:files:get",
      "$files->get",
      "files get"
    ],
    "body": "\\$file->get();",
    "description": "Optimizes and returns the current file list."
  },
  "files set": {
    "prefix": [
      "ci:files:set",
      "$files->set",
      "files set"
    ],
    "body": "\\$file->set([${1:files}]);",
    "description": "Sets the file list directly, files are still subject to verification. This works as a \"reset\" method with []."
  },
  "files add": {
    "prefix": [
      "ci:files:add",
      "$files->add",
      "files add"
    ],
    "body": "\\$file->add('${1:paths}', ${2:boolean});",
    "description": "Adds an array/single file or directory to the list."
  },
  "files addFiles": {
    "prefix": [
      "ci:files:addFiles",
      "$files->addFiles",
      "files addFiles"
    ],
    "body": "\\$file->addFiles([${1:files}]);",
    "description": "Verifies and adds files to the list."
  },
  "files addFile": {
    "prefix": [
      "ci:files:addFile",
      "$files->addFile",
      "files addFile"
    ],
    "body": "\\$file->addFile('${1:file}');",
    "description": "Verifies and adds a single file to the file list."
  },
  "files removeFiles": {
    "prefix": [
      "ci:files:removeFiles",
      "$files->removeFiles",
      "files removeFiles"
    ],
    "body": "\\$file->removeFiles([${1:files}]);",
    "description": "Removes files from the list."
  },
  "files removeFile": {
    "prefix": [
      "ci:files:removeFile",
      "$files->removeFile",
      "files removeFile"
    ],
    "body": "\\$file->removeFile('${1:file}');",
    "description": "Removes a single file from the list."
  },
  "files addDirectories": {
    "prefix": [
      "ci:files:addDirectories",
      "$files->addDirectories",
      "files addDirectories"
    ],
    "body": "\\$file->addDirectories([${1:directories}], ${2:boolean});",
    "description": "Verifies and adds files from each directory to the list."
  },
  "files addDirectory": {
    "prefix": [
      "ci:files:addDirectory",
      "$files->addDirectory",
      "files addDirectory"
    ],
    "body": "\\$file->addDirectory('${1:directory}', ${2:boolean});",
    "description": "Verifies and adds all files from a directory."
  },
  "files removePattern": {
    "prefix": [
      "ci:files:removePattern",
      "$files->removePattern",
      "files removePattern"
    ],
    "body": "\\$file->removePattern('${1:pattern}', '${2:scope}');",
    "description": "Removes any files from the list that match the supplied pattern (within the optional scope)."
  },
  "files retainPattern": {
    "prefix": [
      "ci:files:retainPattern",
      "$files->retainPattern",
      "files retainPattern"
    ],
    "body": "\\$file->retainPattern('${1:pattern}', '${2:scope}');",
    "description": "Keeps only the files from the list that match (within the optional scope)."
  },
  "files count": {
    "prefix": [
      "ci:files:count",
      "$files->count",
      "files count"
    ],
    "body": "\\$file->count();",
    "description": "Returns the current number of files in the collection. Fulfills Countable."
  },
  "files getIterator": {
    "prefix": [
      "ci:files:getIterator",
      "$files->getIterator",
      "files getIterator"
    ],
    "body": "\\$file->getIterator();",
    "description": "* Yields as an Iterator for the current files. Fulfills IteratorAggregate."
  }
}
