{
  "session get": {
    "prefix": [
      "ci:session:get",
      "$session->get",
      "session get"
    ],
    "body": "\\$session->get('${1:key}');",
    "description": "Get user data that has been set in the session."
  },
  "session set": {
    "prefix": [
      "ci:session:set",
      "$session->set",
      "session set"
    ],
    "body": "\\$session->set([${1:data}], ${2:value});",
    "description": "Sets user data into the session."
  },
  "session has": {
    "prefix": [
      "ci:session:has",
      "$session->has",
      "session has"
    ],
    "body": "\\$session->has('${1:key}');",
    "description": "Returns whether an index exists in the session array."
  },
  "session push": {
    "prefix": [
      "ci:session:push",
      "$session->push",
      "session push"
    ],
    "body": "\\$session->push('${1:key}', ${2:data});",
    "description": "Push new value onto session value that is array."
  },
  "session remove": {
    "prefix": [
      "ci:session:remove",
      "$session->remove",
      "session remove"
    ],
    "body": "\\$session->remove('${1:key}');",
    "description": "Remove one or more session properties."
  },
  "session markAsFlashdata": {
    "prefix": [
      "ci:session:markAsFlashdata",
      "$session->markAsFlashdata",
      "session markAsFlashdata"
    ],
    "body": "\\$session->markAsFlashdata('${1:key}');",
    "description": "Mark a session property or properties as flashdata."
  },
  "session unmarkFlashdata": {
    "prefix": [
      "ci:session:unmarkFlashdata",
      "$session->unmarkFlashdata",
      "session unmarkFlashdata"
    ],
    "body": "\\$session->unmarkFlashdata('${1:key}');",
    "description": "Unmark data in the session as flashdata."
  },
  "session getFlashKeys": {
    "prefix": [
      "ci:session:getFlashKeys",
      "$session->getFlashKeys",
      "session getFlashKeys"
    ],
    "body": "\\$session->getFlashKeys();",
    "description": "Retrieve all of the keys for session data marked as flashdata."
  },
  "session setFlashdata": {
    "prefix": [
      "ci:session:setFlashdata",
      "$session->setFlashdata",
      "session setFlashdata"
    ],
    "body": "\\$session->setFlashdata([${1:data}], ${2:value});",
    "description": "Sets data into the session that will only last for a single request."
  },
  "session getFlashdata": {
    "prefix": [
      "ci:session:getFlashdata",
      "$session->getFlashdata",
      "session getFlashdata"
    ],
    "body": "\\$session->getFlashdata(${1:value});",
    "description": "Retrieve one or more items of flash data from the session."
  },
  "session keepFlashdata": {
    "prefix": [
      "ci:session:keepFlashdata",
      "$session->keepFlashdata",
      "session keepFlashdata"
    ],
    "body": "\\$session->keepFlashdata('${1:key}');",
    "description": "Keeps a single piece of flash data alive for one more request."
  },
  "session markAsTempdata": {
    "prefix": [
      "ci:session:markAsTempdata",
      "$session->markAsTempdata",
      "session markAsTempdata"
    ],
    "body": "\\$session->markAsTempdata('${1:key}', ${2:seconds});",
    "description": "Mark one of more pieces of data as being temporary, meaning that it has a set lifespan within the session."
  },
  "session unmarkTempdata": {
    "prefix": [
      "ci:session:unmarkTempdata",
      "$session->unmarkTempdata",
      "session unmarkTempdata"
    ],
    "body": "\\$session->unmarkTempdata('${1:key}');",
    "description": "Unmarks temporary data in the session, effectively removing its lifespan and allowing it to live as long as the session does."
  },
  "session setTempdata": {
    "prefix": [
      "ci:session:setTempdata",
      "$session->setTempdata",
      "session setTempdata"
    ],
    "body": "\\$session->setTempdata('${1:key}', ${2:value}, ${3:seconds});",
    "description": "Sets new data into the session, and marks it as temporary data with a set lifespan."
  },
  "session getTempdata": {
    "prefix": [
      "ci:session:getTempdata",
      "$session->getTempdata",
      "session getTempdata"
    ],
    "body": "\\$session->getTempdata('${1:key}');",
    "description": "Returns either a single piece of tempdata, or all temp data currently in the session."
  },
  "session removeTempdata": {
    "prefix": [
      "ci:session:removeTempdata",
      "$session->removeTempdata",
      "session removeTempdata"
    ],
    "body": "\\$session->removeTempdata('${1:key}');",
    "description": "Removes a single piece of temporary data from the session."
  },
  "session getTempKeys": {
    "prefix": [
      "ci:session:getTempKeys",
      "$session->getTempKeys",
      "session getTempKeys"
    ],
    "body": "\\$session->getTempKeys();",
    "description": "Retrieve the keys of all session data that have been marked as temporary data."
  },
  "session setSaveHandler": {
    "prefix": [
      "ci:session:setSaveHandler",
      "$session->setSaveHandler",
      "session setSaveHandler"
    ],
    "body": "\\$session->setSaveHandler();",
    "description": "Sets the driver as the session handler in PHP."
  },
  "session startSession": {
    "prefix": [
      "ci:session:startSession",
      "$session->startSession",
      "session startSession"
    ],
    "body": "\\$session->startSession();",
    "description": "Starts the session."
  },
  "session setCookie": {
    "prefix": [
      "ci:session:setCookie",
      "$session->setCookie",
      "session setCookie"
    ],
    "body": "\\$session->setCookie();",
    "description": "Takes care of setting the cookie on the client side."
  },
  "session start": {
    "prefix": [
      "ci:session:start",
      "$session->start",
      "session start"
    ],
    "body": "\\$session->start();",
    "description": "Initialize the session container and starts up the session."
  },
  "session stop": {
    "prefix": [
      "ci:session:stop",
      "$session->stop",
      "session stop"
    ],
    "body": "\\$session->stop();",
    "description": "Destroys the current session."
  },
  "session regenerate": {
    "prefix": [
      "ci:session:regenerate",
      "$session->regenerate",
      "session regenerate"
    ],
    "body": "\\$session->regenerate(${1:boolean});",
    "description": "Regenerates the session ID."
  },
  "session destroy": {
    "prefix": [
      "ci:session:destroy",
      "$session->destroy",
      "session destroy"
    ],
    "body": "\\$session->destroy();",
    "description": "Destroys the current session."
  }
}
