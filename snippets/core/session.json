{
  "get": {
    "prefix": [
      "$session->get",
      "session get"
    ],
    "body": "\\$session->get('${1:key}');",
    "description": "Get user data that has been set in the session."
  },
  "set": {
    "prefix": [
      "$session->set",
      "session set"
    ],
    "body": "\\$session->set([${1:data}], ${2:value});",
    "description": "Sets user data into the session."
  },
  "has": {
    "prefix": [
      "$session->has",
      "session has"
    ],
    "body": "\\$session->has('${1:key}');",
    "description": "Returns whether an index exists in the session array."
  },
  "push": {
    "prefix": [
      "$session->push",
      "session push"
    ],
    "body": "\\$session->push('${1:key}', ${2:data});",
    "description": "Push new value onto session value that is array."
  },
  "remove": {
    "prefix": [
      "$session->remove",
      "session remove"
    ],
    "body": "\\$session->remove('${1:key}');",
    "description": "Remove one or more session properties."
  },
  "markAsFlashdata": {
    "prefix": [
      "$session->markAsFlashdata",
      "session markAsFlashdata"
    ],
    "body": "\\$session->markAsFlashdata('${1:key}');",
    "description": "Mark a session property or properties as flashdata."
  },
  "unmarkFlashdata": {
    "prefix": [
      "$session->unmarkFlashdata",
      "session unmarkFlashdata"
    ],
    "body": "\\$session->unmarkFlashdata('${1:key}');",
    "description": "Unmark data in the session as flashdata."
  },
  "getFlashKeys": {
    "prefix": [
      "$session->getFlashKeys",
      "session getFlashKeys"
    ],
    "body": "\\$session->getFlashKeys();",
    "description": "Retrieve all of the keys for session data marked as flashdata."
  },
  "setFlashdata": {
    "prefix": [
      "$session->setFlashdata",
      "session setFlashdata"
    ],
    "body": "\\$session->setFlashdata([${1:data}], ${2:value});",
    "description": "Sets data into the session that will only last for a single request."
  },
  "getFlashdata": {
    "prefix": [
      "$session->getFlashdata",
      "session getFlashdata"
    ],
    "body": "\\$session->getFlashdata(${1:value});",
    "description": "Retrieve one or more items of flash data from the session."
  },
  "keepFlashdata": {
    "prefix": [
      "$session->keepFlashdata",
      "session keepFlashdata"
    ],
    "body": "\\$session->keepFlashdata('${1:key}');",
    "description": "Keeps a single piece of flash data alive for one more request."
  },
  "markAsTempdata": {
    "prefix": [
      "$session->markAsTempdata",
      "session markAsTempdata"
    ],
    "body": "\\$session->markAsTempdata('${1:key}', ${2:seconds});",
    "description": "Mark one of more pieces of data as being temporary, meaning that it has a set lifespan within the session."
  },
  "unmarkTempdata": {
    "prefix": [
      "$session->unmarkTempdata",
      "session unmarkTempdata"
    ],
    "body": "\\$session->unmarkTempdata('${1:key}');",
    "description": "Unmarks temporary data in the session, effectively removing its lifespan and allowing it to live as long as the session does."
  },
  "setTempdata": {
    "prefix": [
      "$session->setTempdata",
      "session setTempdata"
    ],
    "body": "\\$session->setTempdata('${1:key}', ${2:value}, ${3:seconds});",
    "description": "Sets new data into the session, and marks it as temporary data with a set lifespan."
  },
  "getTempdata": {
    "prefix": [
      "$session->getTempdata",
      "session getTempdata"
    ],
    "body": "\\$session->getTempdata('${1:key}');",
    "description": "Returns either a single piece of tempdata, or all temp data currently in the session."
  },
  "removeTempdata": {
    "prefix": [
      "$session->removeTempdata",
      "session removeTempdata"
    ],
    "body": "\\$session->removeTempdata('${1:key}');",
    "description": "Removes a single piece of temporary data from the session."
  },
  "getTempKeys": {
    "prefix": [
      "$session->getTempKeys",
      "session getTempKeys"
    ],
    "body": "\\$session->getTempKeys();",
    "description": "Retrieve the keys of all session data that have been marked as temporary data."
  },
  "setSaveHandler": {
    "prefix": [
      "$session->setSaveHandler",
      "session setSaveHandler"
    ],
    "body": "\\$session->setSaveHandler();",
    "description": "Sets the driver as the session handler in PHP."
  },
  "startSession": {
    "prefix": [
      "$session->startSession",
      "session startSession"
    ],
    "body": "\\$session->startSession();",
    "description": "Starts the session."
  },
  "setCookie": {
    "prefix": [
      "$session->setCookie",
      "session setCookie"
    ],
    "body": "\\$session->setCookie();",
    "description": "Takes care of setting the cookie on the client side."
  },
  "start": {
    "prefix": [
      "$session->start",
      "session start"
    ],
    "body": "\\$session->start();",
    "description": "Initialize the session container and starts up the session."
  },
  "stop": {
    "prefix": [
      "$session->stop",
      "session stop"
    ],
    "body": "\\$session->stop();",
    "description": "Destroys the current session."
  },
  "regenerate": {
    "prefix": [
      "$session->regenerate",
      "session regenerate"
    ],
    "body": "\\$session->regenerate(${1:boolean});",
    "description": "Regenerates the session ID."
  },
  "destroy": {
    "prefix": [
      "$session->destroy",
      "session destroy"
    ],
    "body": "\\$session->destroy();",
    "description": "Destroys the current session."
  }
}
