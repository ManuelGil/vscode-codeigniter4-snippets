{
  "time now": {
    "prefix": [
      "Time::now",
      "time now"
    ],
    "body": "Time::now('${1:timezone}', '${2:locale}')",
    "description": "Returns a new Time instance with the timezone set."
  },
  "time parse": {
    "prefix": [
      "Time::parse",
      "time parse"
    ],
    "body": "Time::parse('${1:datetime}', ${2:timezone}, '${3:locale}')",
    "description": "Returns a new Time instance while parsing a datetime string."
  },
  "time today": {
    "prefix": [
      "Time::today",
      "time today"
    ],
    "body": "Time::today('${1:timezone}', '${2:locale}')",
    "description": "Return a new time with the time set to midnight."
  },
  "time yesterday": {
    "prefix": [
      "Time::yesterday",
      "time yesterday"
    ],
    "body": "Time::yesterday('${1:timezone}', '${2:locale}')",
    "description": "Returns an instance set to midnight yesterday morning."
  },
  "time tomorrow": {
    "prefix": [
      "Time::tomorrow",
      "time tomorrow"
    ],
    "body": "Time::tomorrow('${1:timezone}', '${2:locale}')",
    "description": "Returns an instance set to midnight yesterday morning."
  },
  "time createFromDate": {
    "prefix": [
      "Time::createFromDate",
      "time createFromDate"
    ],
    "body": "Time::createFromDate(${1:year}, ${2:month}, ${3:day}, '${4:timezone}', '${5:locale}')",
    "description": "Returns a new instance based on the year, month and day. If any of those three are left empty, will default to the current value."
  },
  "time createFromTime": {
    "prefix": [
      "Time::createFromTime",
      "time createFromTime"
    ],
    "body": "Time::createFromTime(${1:hour}, ${2:minutes}, ${3:seconds}, '${4:timezone}', '${5:locale}')",
    "description": "Returns a new instance with the date set to today, and the time set to the values passed in."
  },
  "time create": {
    "prefix": [
      "Time::create",
      "time create"
    ],
    "body": "Time::create(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minutes}, ${6:seconds}, '${7:timezone}', '${8:locale}')",
    "description": "Returns a new instance with the date time values individually set."
  },
  "time createFromFormat": {
    "prefix": [
      "Time::createFromFormat",
      "time createFromFormat"
    ],
    "body": "Time::createFromFormat('${1:format}', '${2:datetime}', '${3:timezone}')",
    "description": "Provides a replacement for DateTime's own createFromFormat function, that provides more flexible timeZone handling"
  },
  "time createFromTimestamp": {
    "prefix": [
      "Time::createFromTimestamp",
      "time createFromTimestamp"
    ],
    "body": "Time::createFromTimestamp(${1:timestamp}, '${2:timezone}', '${3:locale}')",
    "description": "Returns a new instance with the datetime set based on the provided UNIX timestamp."
  },
  "time createFromInstance": {
    "prefix": [
      "Time::createFromInstance",
      "time createFromInstance"
    ],
    "body": "Time::createFromInstance(DateTimeInterface ${1:dateTime}, '${2:locale}')",
    "description": "Takes an instance of DateTimeInterface and returns an instance of Time with it's same values."
  },
  "time instance": {
    "prefix": [
      "Time::instance",
      "time instance"
    ],
    "body": "Time::instance(${1:dateTime}, '${2:locale}')",
    "description": "Takes an instance of DateTime and returns an instance of Time with it's same values."
  },
  "time setTestNow": {
    "prefix": [
      "Time::setTestNow",
      "time setTestNow"
    ],
    "body": "Time::setTestNow('${1:datetime}', '${2:timezone}', '${3:locale}')",
    "description": "Creates an instance of Time that will be returned during testing when calling 'Time: :now()' instead of the current time."
  },
  "time hasTestNow": {
    "prefix": [
      "Time::hasTestNow",
      "time hasTestNow"
    ],
    "body": "Time::hasTestNow()",
    "description": "Returns whether we have a testNow instance saved."
  },
  "time toDateTime": {
    "prefix": [
      "$time->toDateTime",
      "time toDateTime"
    ],
    "body": "\\$time->toDateTime()",
    "description": "Converts the current instance to a mutable DateTime object."
  },
  "time getYear": {
    "prefix": [
      "$time->getYear",
      "time getYear"
    ],
    "body": "\\$time->getYear()",
    "description": "Returns the localized Year."
  },
  "time getMonth": {
    "prefix": [
      "$time->getMonth",
      "time getMonth"
    ],
    "body": "\\$time->getMonth()",
    "description": "Returns the localized Month."
  },
  "time getDay": {
    "prefix": [
      "$time->getDay",
      "time getDay"
    ],
    "body": "\\$time->getDay()",
    "description": "Return the localized day of the month."
  },
  "time getHour": {
    "prefix": [
      "$time->getHour",
      "time getHour"
    ],
    "body": "\\$time->getHour()",
    "description": "Return the localized hour (in 24-hour format).."
  },
  "time getMinute": {
    "prefix": [
      "$time->getMinute",
      "time getMinute"
    ],
    "body": "\\$time->getMinute()",
    "description": "Return the localized minutes in the hour.."
  },
  "time getSecond": {
    "prefix": [
      "$time->getSecond",
      "time getSecond"
    ],
    "body": "\\$time->getSecond()",
    "description": "Return the localized seconds."
  },
  "time getDayOfWeek": {
    "prefix": [
      "$time->getDayOfWeek",
      "time getDayOfWeek"
    ],
    "body": "\\$time->getDayOfWeek()",
    "description": "Return the index of the day of the week."
  },
  "time getDayOfYear": {
    "prefix": [
      "$time->getDayOfYear",
      "time getDayOfYear"
    ],
    "body": "\\$time->getDayOfYear()",
    "description": "Return the index of the day of the year."
  },
  "time getWeekOfMonth": {
    "prefix": [
      "$time->getWeekOfMonth",
      "time getWeekOfMonth"
    ],
    "body": "\\$time->getWeekOfMonth()",
    "description": "Return the index of the week in the month."
  },
  "time getWeekOfYear": {
    "prefix": [
      "$time->getWeekOfYear",
      "time getWeekOfYear"
    ],
    "body": "\\$time->getWeekOfYear()",
    "description": "Return the index of the week in the year."
  },
  "time getAge": {
    "prefix": [
      "$time->getAge",
      "time getAge"
    ],
    "body": "\\$time->getAge()",
    "description": "Returns the age in years from the date and 'now'."
  },
  "time getQuarter": {
    "prefix": [
      "$time->getQuarter",
      "time getQuarter"
    ],
    "body": "\\$time->getQuarter()",
    "description": "Returns the number of the current quarter for the year."
  },
  "time getDst": {
    "prefix": [
      "$time->getDst",
      "time getDst"
    ],
    "body": "\\$time->getDst()",
    "description": "Are we in daylight savings time currently?"
  },
  "time getLocal": {
    "prefix": [
      "$time->getLocal",
      "time getLocal"
    ],
    "body": "\\$time->getLocal()",
    "description": "Returns boolean whether the passed timezone is the same as the local timezone."
  },
  "time getUtc": {
    "prefix": [
      "$time->getUtc",
      "time getUtc"
    ],
    "body": "\\$time->getUtc()",
    "description": "Returns boolean whether object is in UTC."
  },
  "time getTimezoneName": {
    "prefix": [
      "$time->getTimezoneName",
      "time getTimezoneName"
    ],
    "body": "\\$time->getTimezoneName()",
    "description": "Returns the name of the current timezone."
  },
  "time setYear": {
    "prefix": [
      "$time->setYear",
      "time setYear"
    ],
    "body": "\\$time->setYear('${1:value}')",
    "description": "Sets the current year for this instance."
  },
  "time setMonth": {
    "prefix": [
      "$time->setMonth",
      "time setMonth"
    ],
    "body": "\\$time->setMonth('${1:value}')",
    "description": "Sets the month of the year."
  },
  "time setDay": {
    "prefix": [
      "$time->setDay",
      "time setDay"
    ],
    "body": "\\$time->setDay('${1:value}')",
    "description": "Sets the day of the month."
  },
  "time setHour": {
    "prefix": [
      "$time->setHour",
      "time setHour"
    ],
    "body": "\\$time->setHour('${1:value}')",
    "description": "Sets the hour of the day (24 hour cycle)."
  },
  "time setMinute": {
    "prefix": [
      "$time->setMinute",
      "time setMinute"
    ],
    "body": "\\$time->setMinute('${1:value}')",
    "description": "Sets the minute of the hour."
  },
  "time setSecond": {
    "prefix": [
      "$time->setSecond",
      "time setSecond"
    ],
    "body": "\\$time->setSecond('${1:value}')",
    "description": "Sets the second of the minute."
  },
  "time setTimezone": {
    "prefix": [
      "$time->setTimezone",
      "time setTimezone"
    ],
    "body": "\\$time->setTimezone('${1:timezone}')",
    "description": "Returns a new instance with the revised timezone."
  },
  "time setTimestamp": {
    "prefix": [
      "$time->setTimestamp",
      "time setTimestamp"
    ],
    "body": "\\$time->setTimestamp(${1:timestamp})",
    "description": "Returns a new instance with the date set to the new timestamp."
  },
  "time addSeconds": {
    "prefix": [
      "$time->addSeconds",
      "time addSeconds"
    ],
    "body": "\\$time->addSeconds(${1:seconds})",
    "description": "Returns a new Time instance with $seconds added to the time."
  },
  "time addMinutes": {
    "prefix": [
      "$time->addMinutes",
      "time addMinutes"
    ],
    "body": "\\$time->addMinutes(${1:minutes})",
    "description": "Returns a new Time instance with $minutes added to the time."
  },
  "time addHours": {
    "prefix": [
      "$time->addHours",
      "time addHours"
    ],
    "body": "\\$time->addHours(${1:hours})",
    "description": "Returns a new Time instance with $hours added to the time."
  },
  "time addDays": {
    "prefix": [
      "$time->addDays",
      "time addDays"
    ],
    "body": "\\$time->addDays(${1:days})",
    "description": "Returns a new Time instance with $days added to the time."
  },
  "time addMonths": {
    "prefix": [
      "$time->addMonths",
      "time addMonths"
    ],
    "body": "\\$time->addMonths(${1:months})",
    "description": "Returns a new Time instance with $months added to the time."
  },
  "time addYears": {
    "prefix": [
      "$time->addYears",
      "time addYears"
    ],
    "body": "\\$time->addYears(${1:years})",
    "description": "Returns a new Time instance with ${1:years} added to the time."
  },
  "time subSeconds": {
    "prefix": [
      "$time->subSeconds",
      "time subSeconds"
    ],
    "body": "\\$time->subSeconds(${1:seconds})",
    "description": "Returns a new Time instance with $seconds subtracted from the time."
  },
  "time subMinutes": {
    "prefix": [
      "$time->subMinutes",
      "time subMinutes"
    ],
    "body": "\\$time->subMinutes(${1:minutes})",
    "description": "Returns a new Time instance with $minutes subtracted from the time."
  },
  "time subHours": {
    "prefix": [
      "$time->subHours",
      "time subHours"
    ],
    "body": "\\$time->subHours(${1:hours})",
    "description": "Returns a new Time instance with $hours subtracted from the time."
  },
  "time subDays": {
    "prefix": [
      "$time->subDays",
      "time subDays"
    ],
    "body": "\\$time->subDays(${1:days})",
    "description": "Returns a new Time instance with $days subtracted from the time."
  },
  "time subMonths": {
    "prefix": [
      "$time->subMonths",
      "time subMonths"
    ],
    "body": "\\$time->subMonths(${1:months})",
    "description": "Returns a new Time instance with $months subtracted from the time."
  },
  "time subYears": {
    "prefix": [
      "$time->subYears",
      "time subYears"
    ],
    "body": "\\$time->subYears(${1:years})",
    "description": "Returns a new Time instance with $hours subtracted from the time."
  },
  "time toDateTimeString": {
    "prefix": [
      "$time->toDateTimeString",
      "time toDateTimeString"
    ],
    "body": "\\$time->toDateTimeString()",
    "description": "Returns the localized value of the date in the format 'Y-m-d H:i:s'."
  },
  "time toDateString": {
    "prefix": [
      "$time->toDateString",
      "time toDateString"
    ],
    "body": "\\$time->toDateString()",
    "description": "Returns a localized version of the date in Y-m-d format."
  },
  "time toFormattedDateString": {
    "prefix": [
      "$time->toFormattedDateString",
      "time toFormattedDateString"
    ],
    "body": "\\$time->toFormattedDateString()",
    "description": "Returns a localized version of the date in nicer date format: i.e. Apr 1, 2017"
  },
  "time toTimeString": {
    "prefix": [
      "$time->toTimeString",
      "time toTimeString"
    ],
    "body": "\\$time->toTimeString()",
    "description": "Returns a localized version of the time in nicer date format: i.e. 13:20:33"
  },
  "time toLocalizedString": {
    "prefix": [
      "$time->toLocalizedString",
      "time toLocalizedString"
    ],
    "body": "\\$time->toLocalizedString('${1:format}')",
    "description": "Returns the localized value of this instance in $format"
  },
  "time equals": {
    "prefix": [
      "$time->equals",
      "time equals"
    ],
    "body": "\\$time->equals('${1:testTime}', ''${2:timezone}'')",
    "description": "Determines if the datetime passed in is equal to the current instance. Equal in this case means that they represent the same moment in time, and are not required to be in the same timezone, as both times are converted to UTC and compared that way."
  },
  "time sameAs": {
    "prefix": [
      "$time->sameAs",
      "time sameAs"
    ],
    "body": "\\$time->sameAs('${1:testTime}', ''${1:timezone}'')",
    "description": "Ensures that the times are identical, taking timezone into account."
  },
  "time isBefore": {
    "prefix": [
      "$time->isBefore",
      "time isBefore"
    ],
    "body": "\\$time->isBefore('${1:testTime}', ''${1:timezone}'')",
    "description": "Determines if the current instance's time is before $testTime, after converting to UTC."
  },
  "time isAfter": {
    "prefix": [
      "$time->isAfter",
      "time isAfter"
    ],
    "body": "\\$time->isAfter('${1:testTime}', ''${1:timezone}'')",
    "description": "Determines if the current instance's time is after $testTime, after converting in UTC."
  },
  "time humanize": {
    "prefix": [
      "$time->humanize",
      "time humanize"
    ],
    "body": "\\$time->humanize()",
    "description": "Returns a text string that is easily readable that describes how long ago, or how long from now, a date is, like: 6 hours ago."
  },
  "time difference": {
    "prefix": [
      "$time->difference",
      "time difference"
    ],
    "body": "\\$time->difference('${1:testTime}', ''${1:timezone}'')",
    "description": ""
  },
  "time getUTCObject": {
    "prefix": [
      "$time->getUTCObject",
      "time getUTCObject"
    ],
    "body": "\\$time->getUTCObject('${1:time}', ''${1:timezone}'')",
    "description": "Returns a Time instance with the timezone converted to UTC."
  },
  "time getCalendar": {
    "prefix": [
      "$time->getCalendar",
      "time getCalendar"
    ],
    "body": "\\$time->getCalendar()",
    "description": "Returns the IntlCalendar object used for this object, taking into account the locale, date, etc."
  }
}
